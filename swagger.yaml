openapi: 3.0.0
info:
  version: 1.0.0
  title: Megasense data portal API
security:
  - bearerAuth: []
paths:
  /system/ping:
    get:
      summary: System ping endpoint
      operationId: ping
      tags:
        - system
      responses:
        '200':
          description: System ping response
          content:
            text/plain:
              schema:
                description: Returns PING
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /routes:
    post:
      summary: Creates a route
      operationId: createRoute
      requestBody:
        description: A route to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      tags:
        - Routes
      responses:
        '200':
          description: A created route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Lists all routes
      operationId: listRoutes
      tags:
        - Routes
      responses:
        '200':
          description: An array of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /routes/{routeId}:
    get:
      summary: Finds a route
      operationId: findRoute
      tags:
        - Routes
      parameters: 
        - name: routeId
          in: path
          description: Route id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a route
      operationId: deleteRoute
      tags:
        - Routes
      parameters: 
        - name: routeId
          in: path
          description: Route id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /totalExposure:
    get:
      summary: Gets the total exposure of a user
      operationId: totalExposure
      tags:
        - TotalExposure
      parameters: 
        - name: exposedBefore
          in: query
          description: Exposed before time
          required: false
          schema:
            type: "string"
        - name: exposedAfter
          in: query
          description: Exposed after time
          required: false
          schema:
            type: "string"
      responses:
        '200':
          description: The total exposure of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exposureInstances:
    post:
      summary: Creates an exposure instance
      operationId: createExposureInstance
      requestBody:
        description: An exposure instance to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExposureInstance'
      tags:
        - ExposureInstances
      responses:
        '200':
          description: A created exposure instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Lists exposure instances
      operationId: listExposureInstances
      tags:
        - ExposureInstances
      parameters: 
        - name: createdBefore
          in: query
          description: Created before time
          required: false
          schema:
            type: "string"
        - name: createdAfter
          in: query
          description: Created after time
          required: false
          schema:
            type: "string"
      responses:
        '200':
          description: An array of exposure instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exposureInstances/{exposureInstanceId}:
    get:
      summary: Finds an exposure instance
      operationId: findExposureInstance
      tags:
        - ExposureInstances
      parameters: 
        - name: exposureInstanceId
          in: path
          description: Exposure instance id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found exposure instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
  /airQuality:
    get:
      summary: Get air quality data
      operationId: getAirQuality
      tags:
        - AirQuality
      parameters: 
        - name: pollutant
          in: query
          description: pollutant type
          required: true
          schema:
            type: string
        - name: precision
          in: query
          description: Precision in meters for the data that is returned
          required: true
          schema:
            type: integer
        - name: boundingBoxCorner1
          in: query
          description: Coordinates for the lower left of the bounding box
          required: true
          schema:
            type: string
        - name: boundingBoxCorner2
          in: query
          description: Coordinates for the upper right of the bounding box
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Air quality values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AirQuality'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /userSettings:
    get:
      summary: Gets user settings of the user who is logged in
      operationId: getUserSettings
      tags:
        - UserSettings
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates user settings for the user who is logged in
      operationId: createUserSettings
      tags:
        - UserSettings
      requestBody:
        description: New user settings
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Updates user settings for the user who is logged in
      operationId: updateUserSettings
      tags:
        - UserSettings
      requestBody:
        description: New user settings
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'  
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ExposureInstance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        routeId:
          type: string
          format: uuid
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        carbonMonoxide:
          type: number
          format: float
        nitrogenMonoxide:
          type: number
          format: float
        nitrogenDioxide:
          type: number
          format: float
        ozone:
          type: number
          format: float
        sulfurDioxide:
          type: number
          format: float
        harmfulMicroparticles:
          type: number
          format: float
    Route:
      type: object
      required:
        - routePoints
        - locationFromName
        - locationToName
      properties:
        id:
          type: string
          format: uuid
        routePoints:
          type: string
        locationFromName:
          type: string
        locationToName:
          type: string
        savedAt:
          type: string
          format: date-time
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          
    PollutantType:
      type: string
      enum:
        - CARBON_MONOXIDE
        - NITROGEN_MONOXIDE
        - NITROGEN_DIOXIDE
        - OZONE
        - SULFUR_DIOXIDE
        - MICRO_PARTICLES
      
    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
      
    AirQuality:
      type: object
      required:
        - pollutionValue
        - pollutant
        - location
      properties:
        pollutionValue:
          type: number
          format: float
        pollutant:
          type: object
          $ref: '#/components/schemas/PollutantType'
    
    UserSettings:
      type: object
      properties:
        homeAddress:
          type: string