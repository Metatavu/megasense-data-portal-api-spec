openapi: 3.0.0
info:
  version: 1.0.0
  title: Megasense data portal API
security:
  - bearerAuth: []
paths:
  /v1/system/ping:
    get:
      summary: System ping endpoint
      operationId: ping
      tags:
        - system
      responses:
        '200':
          description: System ping response
          content:
            text/plain:
              schema:
                type: string
                description: Returns PING
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/routes:
    post:
      summary: Creates a route
      operationId: createRoute
      requestBody:
        description: A route to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      tags:
        - Routes
      responses:
        '200':
          description: A created route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Lists all routes
      operationId: listRoutes
      tags:
        - Routes
      parameters:
        - name: routeType
          in: query
          description: Route movement type
          required: false
          schema:
            type: string
            $ref: '#/components/schemas/RouteType'
        - name: accessRights
          in: query
          description: access rights of the route
          required: false
          schema:
            type: string
            enum: [PUBLIC_ONLY, PRIVATE_ONLY]
      responses:
        '200':
          description: An array of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/routes/{routeId}:
    get:
      summary: Finds a route
      operationId: findRoute
      tags:
        - Routes
      parameters: 
        - name: routeId
          in: path
          description: Route id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a route
      operationId: deleteRoute
      tags:
        - Routes
      parameters: 
        - name: routeId
          in: path
          description: Route id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/totalExposure:
    get:
      summary: Gets the total exposure of a user
      operationId: totalExposure
      tags:
        - TotalExposure
      parameters: 
        - name: exposedBefore
          in: query
          description: Exposed before time
          required: false
          schema:
            type: string
            format: date-time
        - name: exposedAfter
          in: query
          description: Exposed after time
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: The total exposure of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/exposureInstances:
    post:
      summary: Creates an exposure instance
      operationId: createExposureInstance
      requestBody:
        description: An exposure instance to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExposureInstance'
      tags:
        - ExposureInstances
      responses:
        '200':
          description: A created exposure instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Lists exposure instances
      operationId: listExposureInstances
      tags:
        - ExposureInstances
      parameters: 
        - name: createdBefore
          in: query
          description: Created before time
          required: false
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          description: Created after time
          required: false
          schema:
            type: string
            format:  date-time
      responses:
        '200':
          description: An array of exposure instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/exposureInstances/{exposureInstanceId}:
    get:
      summary: Finds an exposure instance
      operationId: findExposureInstance
      tags:
        - ExposureInstances
      parameters: 
        - name: exposureInstanceId
          in: path
          description: Exposure instance id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found exposure instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposureInstance'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes an exposure instance
      operationId: deleteExposureInstance
      tags:
        - ExposureInstances
      parameters: 
        - name: exposureInstanceId
          in: path
          description: Exposure instance id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/airQuality:
    post:
      summary: Get air quality for array of coordinates
      operationId: getAirQualityForCoordinatesArray
      tags:
        - AirQuality
      parameters:
        - name: pollutantId
          in: query
          description: pollutant id
          required: false
          schema:
            type: string
            format: uuid
        - name: routingTime
          in: query
          description: Time of requested air quality data
          required: false
          schema:
            type: string
            format: date-time
      requestBody:
        description: coordinates of route
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: Air quality values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteAirQuality'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get air quality data
      operationId: getAirQuality
      tags:
        - AirQuality
      parameters: 
        - name: pollutantId
          in: query
          description: pollutant id
          required: false
          schema:
            type: string
            format: uuid
        - name: boundingBoxCorner1
          in: query
          description: Coordinates for the lower left of the bounding box
          required: false
          schema:
            type: string
        - name: boundingBoxCorner2
          in: query
          description: Coordinates for the upper right of the bounding box
          required: false
          schema:
            type: string
        - name: routingTime
          in: query
          description: Time of requested air quality data
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Air quality values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AirQuality'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/airQuality/{coordinates}/{pollutantId}:
    get:
      summary: Get air quality for specific coordinates
      operationId: getAirQualityForCoordinates
      tags:
        - AirQuality
      parameters:
        - name: coordinates
          in: path
          description: Coordinates for air quality
          required: true
          schema:
            type: string
        - name: pollutantId
          in: path
          description: Pollutant to get
          required: true
          schema:
            type: string
            format: uuid
        - name: routingTime
          in: query
          description: Time of requested air quality data
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: The air quality for a specific coordinate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirQuality'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users:
    post:
      summary: Creates new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: New user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/users/{userId}:
    get:
      summary: Gets user settings of the user who is logged in
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Updates user data for the user who is logged in
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      requestBody:
        description: New user settings
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes user who is logged in
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/users/data:
    get:
      summary: Downloads the data of the user who is logged in
      operationId: downloadUserData
      tags:
        - Users
      responses:
        '200':
          description: User data
          content:
            application/zip:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /v1/favourites:
    get:
      summary: Gets user favourite locations
      operationId: listUserFavouriteLocations
      tags:
        - FavouriteLocations
      responses:
        '200':
          description: An array of user favourite locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavouriteLocation'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new user favourite location
      operationId: createUserFavouriteLocation
      tags:
        - FavouriteLocations
      requestBody:
        description: A new favourite location
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteLocation'
      responses:
        '200':
          description: A new favourite location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteLocation'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/favourites/{favouriteId}:
    put:
      summary: Updates details for an user favourite location
      operationId: updateUserFavouriteLocation
      tags:
        - FavouriteLocations
      parameters: 
        - name: favouriteId
          in: path
          description: Favourite id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New favourite location details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteLocation'  
      responses:
        '200':
          description: An updated favourite location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteLocation'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes an user favourite location
      operationId: deleteUserFavouriteLocation
      tags:
        - FavouriteLocations
      parameters: 
        - name: favouriteId
          in: path
          description: Favourite id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/medicalConditions:
    get:
      summary: gets all the medical conditions
      operationId: getMedicalConditions
      tags:
        - MedicalConditions
      responses:
        '200':
          description: found medical conditions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalCondition'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new medical condition
      operationId: createMedicalCondition
      tags:
        - MedicalConditions
      requestBody:
        description: New medical condition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalCondition'
      responses:
        '200':
          description: New medical condition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalCondition'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/medicalConditions/{medicalConditionId}:
    get:
      summary: Finds a medical condition
      operationId: findMedicalCondition
      tags:
        - MedicalConditions
      parameters:
        - name: medicalConditionId
          in: path
          description: medical condition id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found medical condition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalCondition'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Updates medical condition
      operationId: updateMedicalCondition
      tags:
        - MedicalConditions
      parameters:
        - name: medicalConditionId
          in: path
          description: medical condition id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated medical condition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalCondition'
      responses:
        '200':
          description: Medical condition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalCondition'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a medical condition
      operationId: deleteMedicalCondition
      tags:
        - MedicalConditions
      parameters:
        - name: medicalConditionId
          in: path
          description: Medical condition id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/pollutants:
    get:
      summary: Lists pollutants
      operationId: getPollutants
      tags:
        - Pollutants
      parameters:
        - name: pollutantName
          in: query
          description: Pollutant name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: found pollutants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pollutant'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new pollutant
      operationId: createPollutant
      tags:
        - Pollutants
      requestBody:
        description: New pollutant
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pollutant'
      responses:
        '200':
          description: Created pollutant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pollutant'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/pollutants/{pollutantId}:
    get:
      summary: Finds a pollutant
      operationId: findPollutant
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found pollutant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pollutant'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Updates pollutant
      operationId: updatePollutant
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated pollutant
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pollutant'
      responses:
        '200':
          description: Pollutant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pollutant'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes pollutant
      operationId: deletePollutant
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/routingModes:
    get:
      summary: Lists all default routing modes
      operationId: getRoutingModes
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeName
          in: query
          description: Routing mode name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: found routing modes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultRoutingMode'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new default routing mode
      operationId: createRoutingMode
      tags:
        - DefaultRoutingModes
      requestBody:
        description: New routing mode
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultRoutingMode'
      responses:
        '200':
          description: Created routing mode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultRoutingMode'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/routingModes/{routingModeId}:
    get:
      summary: Finds a routing mode
      operationId: findRoutingMode
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeId
          in: path
          description: Routing mode id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A found routing mode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultRoutingMode'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Updates routing mode
      operationId: updateRoutingMode
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeId
          in: path
          description: Routing mode id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated default routing mode
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultRoutingMode'
      responses:
        '200':
          description: Updated default routing mode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultRoutingMode'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes routing mode
      operationId: deleteRoutingMode
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeId
          in: path
          description: Routing mode id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ExposureInstance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        routeId:
          type: string
          format: uuid
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        pollutionValues:
          type: array
          items:
            $ref: '#/components/schemas/PollutionEntry'

    Route:
      type: object
      required:
        - name
        - routePoints
        - locationFromName
        - locationToName
        - isPublic
        - routeType
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        routePoints:
          type: string
        locationFromName:
          type: string
        locationToName:
          type: string
        routeType:
          type: string
          $ref: '#/components/schemas/RouteType'
        isPublic:
          type: boolean
        savedAt:
          type: string
          format: date-time
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

    AirQuality:
      type: object
      required:
        - pollutionValues
        - location
      properties:
        location:
          $ref: '#/components/schemas/Location'
        pollutionValues:
          type: array
          items:
            $ref: '#/components/schemas/PollutionEntry'

    HomeAddress:
      type: object
      required:
        - streetAddress
        - postalCode
        - city
        - country
      properties:
        streetAddress:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string
          
    FavouriteLocation:
      type: object
      required:
        - name
        - latitude
        - longitude
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

    MedicalCondition:
      type: object
      required:
        - conditionName
        - conditionApproved
      properties:
        id:
          type: string
          format: uuid
        conditionName:
          type: string
        conditionApproved:
          type: boolean
        conditionPenalties:
          type: array
          items:
            $ref: '#/components/schemas/PollutantPenalty'

    PollutantPenalty:
      type: object
      required:
        - penalty
        - threshold
      properties:
        id:
          type: string
          format: uuid
        pollutantId:
          type: string
          format: uuid
        penalty:
          type: number
          format: float
        threshold:
          type: number
          format: float

    Pollutant:
      type: object
      required:
        - pollutantName
        - displayName
        - unit
      properties:
        id:
          type: string
          format: uuid
        pollutantName:
          type: string
        displayName:
          type: string
        unit:
          type: string
        limit:
          type: number
          format: float
        recommendation:
          type: number
          format: float

    PollutionEntry:
      type: object
      properties:
        pollutantId:
          type: string
          format: uuid
        value:
          type: number
          format: float

    User:
      type: object
      description: User object
      required:
        - name
        - email
        - showMobileWelcomeScreen
        - pollutantPenalties
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: User name
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
        homeAddress:
          $ref: '#/components/schemas/HomeAddress'
        showMobileWelcomeScreen:
          type: boolean
        pollutantPenalties:
          type: array
          items:
            $ref: '#/components/schemas/PollutantPenalty'
        medicalConditions:
          type: array
          items:
            type: string
            format: uuid
        transportPreference:
          type: string
          $ref: '#/components/schemas/RouteType'

    RouteAirQuality:
      type: object
      description: Total air quality data for the array of coordinates
      required:
        - airQualityEntries
        - pollutionDataTotals
      properties:
        airQualityEntries:
          type: array
          items:
            $ref: '#/components/schemas/AirQuality'
        pollutionDataTotals:
          type: array
          items:
            $ref: '#/components/schemas/PollutionEntry'

    DefaultRoutingMode:
      type: object
      description: detault routing mode
      required:
        - name
        - pollutionPenalties
        - icon
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        icon:
          $ref: '#/components/schemas/RoutingModeIcon'
        pollutantPenalties:
          type: array
          items:
            $ref: '#/components/schemas/PollutantPenalty'

    RouteType:
      type: string
      description: Route transportantion type
      enum:
        - WALKING
        - BIKING
        - ACCESSIBILITY

    RoutingModeIcon:
      type: string
      description: Icon type of a routing mode
      enum:
        - heart
        - thumbUp
        - insight
        - timer
        - timeLine
        - eco
