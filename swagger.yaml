openapi: 3.0.0
info:
  version: 1.0.0
  title: Megasense data portal API
security:
  - bearerAuth: []
paths:
  /v1/system/ping:
    get:
      summary: System ping endpoint
      operationId: ping
      tags:
        - system
      responses:
        "200":
          description: System ping response
          content:
            text/plain:
              schema:
                type: string
                description: Returns PING
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/stripeProducts:
    get:
      summary: Lists Stripe products
      operationId: listStripeProducts
      tags:
        - StripeProducts
      responses:
        "200":
          description: List of Stripe products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StripeProduct"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/stripeProducts/{stripeProductId}/prices:
    get:
      summary: Lists Stripe product prices
      operationId: listStripeProductPrices
      tags:
        - StripeProducts
      parameters:
        - name: stripeProductId
          in: path
          description: The id of the product
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of Stripe product prices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StripeProductPrice"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/routes:
    post:
      summary: Creates a route
      operationId: createRoute
      requestBody:
        description: A route to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Route"
      tags:
        - Routes
      responses:
        "200":
          description: A created route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Lists all routes
      operationId: listRoutes
      tags:
        - Routes
      parameters:
        - name: routeHistoryType
          in: query
          description: Route history type
          required: false
          schema:
            type: string
            $ref: "#/components/schemas/RouteHistoryType"
        - name: transportationType
          in: query
          description: Route movement type
          required: false
          schema:
            type: string
            $ref: "#/components/schemas/TransportationType"
        - name: accessRights
          in: query
          description: access rights of the route
          required: false
          schema:
            type: string
            enum: [PUBLIC_ONLY, PRIVATE_ONLY]
      responses:
        "200":
          description: An array of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Route"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/routes/{routeId}:
    get:
      summary: Finds a route
      operationId: findRoute
      tags:
        - Routes
      parameters:
        - name: routeId
          in: path
          description: Route id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A found route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes a route
      operationId: deleteRoute
      tags:
        - Routes
      parameters:
        - name: routeId
          in: path
          description: Route id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/totalExposure:
    get:
      summary: Gets the total exposure of a user based on its history
      operationId: totalExposure
      tags:
        - TotalExposure
      parameters:
        - name: exposedBefore
          in: query
          description: Exposed before time
          required: false
          schema:
            type: string
            format: date-time
        - name: exposedAfter
          in: query
          description: Exposed after time
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: The total exposure of a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PollutionEntry"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/routePollutionExposureRecords:
    post:
      summary: Creates an exposure instance
      operationId: createRoutePollutionExposureRecord
      description: Creates a pollution record for the user on the route
      requestBody:
        description: An exposure instance to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoutePollutionExposureRecord"
      tags:
        - RoutePollutionExposureRecords
      responses:
        "200":
          description: A created exposure instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutePollutionExposureRecord"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Lists exposure instances
      operationId: listRoutePollutionExposureRecords
      description: Lists pollution records that user was exposed to during routing (pollution data comes from user history, not from air quality data file)
      tags:
        - RoutePollutionExposureRecords
      parameters:
        - name: routeId
          in: query
          description: Route id
          required: false
          schema:
            type: string
            format: uuid
        - name: createdBefore
          in: query
          description: Created before time
          required: false
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          description: Created after time
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: An array of exposure instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoutePollutionExposureRecord"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/routePollutionExposureRecords/{RoutePollutionExposureRecordId}:
    get:
      summary: Finds an exposure record
      operationId: findRoutePollutionExposureRecord
      tags:
        - RoutePollutionExposureRecords
      parameters:
        - name: RoutePollutionExposureRecordId
          in: path
          description: Exposure instance id
          required: true
          schema:
            type: string
            format: uuid
        - name: timeUnit
          in: query
          description: Time unit for the results. If none is provided, results are returned for each route point.
          required: false
          schema:
            $ref: "#/components/schemas/ExposureMeasurementTimeUnit"
      responses:
        "200":
          description: A found exposure instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutePollutionExposureRecord"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes an exposure instance
      operationId: deleteRoutePollutionExposureRecord
      tags:
        - RoutePollutionExposureRecords
      parameters:
        - name: RoutePollutionExposureRecordId
          in: path
          description: Exposure instance id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/passiveExposure:
    post:
      summary: Request passive exposure measurement
      operationId: requestPassiveExposureMeasurement
      description: Requests passive exposure collection for given time and location.
      requestBody:
        description: Passive exposure collection request.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PassiveExposureMeasurementRequest"
      tags:
        - PassiveExposureMeasurements
      responses:
        "202":
          description: The request has been accepted for processing. Measurement is not necessarily ready yet but has been accepted to be processed in the near future. 
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Lists passive exposure measurements
      operationId: listPassiveExposureMeasurements
      description: Lists passive exposure measurement for given time range
      tags:
        - PassiveExposureMeasurements
      parameters:
        - name: before
          in: query
          description: Returns only results that have been collected from before given time. Date time is handled in inclusive way (contains also measurements from the given time)
          required: true
          schema:
            type: string
            format: date-time
        - name: after
          in: query
          description: Returns only results that have been collected from after given time. Date time is handled in inclusive way (contains also measurements from the given time)
          required: true
          schema:
            type: string
            format: date-time
        - name: timeUnit
          in: query
          description: Time unit for the results. MIN15 is allowed only for requests which are max 1 day long.
          required: true
          schema:
            $ref: "#/components/schemas/ExposureMeasurementTimeUnit"
      responses:
        "200":
          description: An array of exposure instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExposureMeasurement"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /v1/airQuality:
    post:
      summary: Gets air quality for array of coordinates (passed as request body) from airquality data file and optionally user's calculated exposure.
      operationId: getAirQualityForCoordinatesArray
      tags:
        - AirQuality
      parameters:
        - name: pollutantId
          in: query
          description: pollutant id
          required: false
          schema:
            type: string
            format: uuid
        - name: routingTime
          in: query
          description: Time of requested air quality data, if missing, the latest available data will be used.
          required: false
          schema:
            type: string
            format: date-time
        - name: routingEnd
          in: query
          description: Time when the route is finished, if missing, no route exposure will be calculated
          required: false
          schema:
            type: string
            format: date-time

      requestBody:
        description: coordinates of route
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Air quality data for the given coordinates and optionally the user's exposure to chemicals while taking the route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutePointsAirQuality"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get air quality data
      operationId: getAirQuality
      description: Gets air quality for the area in the bounding box from airquality data file
      tags:
        - AirQuality
      parameters:
        - name: pollutantId
          in: query
          description: pollutant id
          required: false
          schema:
            type: string
            format: uuid
        - name: boundingBoxCorner1
          in: query
          description: Coordinates for the lower left of the bounding box
          required: false
          schema:
            type: string
        - name: boundingBoxCorner2
          in: query
          description: Coordinates for the upper right of the bounding box
          required: false
          schema:
            type: string
        - name: routingTime
          in: query
          description: Time of requested air quality data
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Air quality values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AirQuality"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/airQuality/{coordinates}/{pollutantId}:
    get:
      summary: Get air quality for specific coordinates from airquality data file
      operationId: getAirQualityForCoordinates
      tags:
        - AirQuality
      parameters:
        - name: coordinates
          in: path
          description: Coordinates for air quality
          required: true
          schema:
            type: string
        - name: pollutantId
          in: path
          description: Pollutant to get
          required: true
          schema:
            type: string
            format: uuid
        - name: routingTime
          in: query
          description: Time of requested air quality data
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: The air quality for a specific coordinate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AirQuality"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/users:
    post:
      summary: Creates new user
      operationId: createUser
      description: Creates new user
      tags:
        - Users
      requestBody:
        description: New user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/users/getByEmail:
    get:
      summary: Gets user by the user email
      operationId: getUserByEmail
      tags:
        - Users
      parameters:
        - name: email
          required: true
          in: query
          description: user id
          schema:
            type: string
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/users/{userId}:
    get:
      summary: Gets user settings by the user id
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Updates user data
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      requestBody:
        description: New user settings
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes user
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}/cards":
    get:
      operationId: listUserStripeCards
      summary: Lists user cards
      description: Lists user stripe cards
      tags:
        - UserCards
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StripeCard"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createUserStripeCard
      summary: Create user card
      description: Creates user stripe card
      tags:
        - UserCards
      parameters:
        - name: userId
          in: path
          description: The user to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/StripeCard"
        description: The reportImage to be created
        required: true
      responses:
        "200":
          description: Created reportImage
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/StripeCard"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}/cards/checkout":
    post:
      operationId: createUserStripeCardIntent
      summary: Create user card setup intent
      description: Creates user card setup intent for new card payment method which will not be charged immediately (used for adding additional cards)
      tags:
        - UserCards
      parameters:
        - name: userId
          in: path
          description: The user to get new payment method
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Created setup intent secret
          content:
            text/plain:
              schema:
                type: string
                description: Setup intent secret
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}/cards/{cardId}":
    get:
      operationId: findUserStripeCard
      summary: Finds user card
      description: Finds a user stripe card
      tags:
        - UserCards
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          description: The id of the card
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/StripeCard"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateUserStripeCard
      summary: Update user card
      description: Updates a user card
      tags:
        - UserCards
      parameters:
        - name: userId
          in: path
          description: The user to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          description: The id of the card
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/StripeCard"
        description: Payload
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/StripeCard"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteUserStripeCard
      summary: Delete user card
      description: Deletes a user card
      tags:
        - UserCards
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          description: The id of the card
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users/{userId}/subscriptions:
    get:
      summary: Lists user subscriptions
      operationId: listUserStripeSubscriptions
      tags:
        - Subscription
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StripeSubscription"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create user subscription
      operationId: createUserStripeSubscription
      tags:
        - Subscription
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      requestBody:
        description: The subscription to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StripeSubscription"
      responses:
        "200":
          description: Created user subscription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeSubscription"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users/{userId}/subscriptions/{subscriptionId}:
    get:
      summary: Find user subscription
      operationId: findUserStripeSubscription
      tags:
        - Subscription
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
        - name: subscriptionId
          required: true
          in: path
          description: subscription id
          schema:
            type: string
      responses:
        "200":
          description: A user subscription found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeSubscription"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update user subscription
      operationId: updateUserStripeSubscription
      tags:
        - Subscription
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
        - name: subscriptionId
          required: true
          in: path
          description: subscription id
          schema:
            type: string
      requestBody:
        description: Updated subsctiption details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StripeSubscription"
      responses:
        "200":
          description: Updated user subscription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeSubscription"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Cancel user subscription
      operationId: cancelUserStripeSubscription
      tags:
        - Subscription
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
        - name: subscriptionId
          required: true
          in: path
          description: subscription id
          schema:
            type: string
      responses:
        "200":
          description: Cancelled user subscription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeSubscription"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users/data:
    get:
      summary: Downloads the data of the user who is logged in
      operationId: downloadUserData
      tags:
        - Users
      responses:
        "200":
          description: User data
          content:
            application/zip:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/favourites:
    get:
      summary: Gets user favourite locations
      operationId: listUserFavouriteLocations
      tags:
        - FavouriteLocations
      responses:
        "200":
          description: An array of user favourite locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FavouriteLocation"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Creates a new user favourite location
      operationId: createUserFavouriteLocation
      tags:
        - FavouriteLocations
      requestBody:
        description: A new favourite location
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavouriteLocation"
      responses:
        "200":
          description: A new favourite location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavouriteLocation"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/favourites/{favouriteId}:
    put:
      summary: Updates details for an user favourite location
      operationId: updateUserFavouriteLocation
      tags:
        - FavouriteLocations
      parameters:
        - name: favouriteId
          in: path
          description: Favourite id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New favourite location details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavouriteLocation"
      responses:
        "200":
          description: An updated favourite location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavouriteLocation"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes an user favourite location
      operationId: deleteUserFavouriteLocation
      tags:
        - FavouriteLocations
      parameters:
        - name: favouriteId
          in: path
          description: Favourite id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/medicalConditions:
    get:
      summary: gets all the medical conditions
      operationId: getMedicalConditions
      tags:
        - MedicalConditions
      responses:
        "200":
          description: found medical conditions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MedicalCondition"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Creates a new medical condition
      operationId: createMedicalCondition
      tags:
        - MedicalConditions
      requestBody:
        description: New medical condition
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicalCondition"
      responses:
        "200":
          description: New medical condition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalCondition"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/medicalConditions/{medicalConditionId}:
    get:
      summary: Finds a medical condition
      operationId: findMedicalCondition
      tags:
        - MedicalConditions
      parameters:
        - name: medicalConditionId
          in: path
          description: medical condition id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A found medical condition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalCondition"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Updates medical condition
      operationId: updateMedicalCondition
      tags:
        - MedicalConditions
      parameters:
        - name: medicalConditionId
          in: path
          description: medical condition id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated medical condition
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicalCondition"
      responses:
        "200":
          description: Medical condition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalCondition"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes a medical condition
      operationId: deleteMedicalCondition
      tags:
        - MedicalConditions
      parameters:
        - name: medicalConditionId
          in: path
          description: Medical condition id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/pollutants:
    get:
      summary: Lists pollutants
      operationId: getPollutants
      tags:
        - Pollutants
      parameters:
        - name: pollutantName
          in: query
          description: Pollutant name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: found pollutants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pollutant"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/pollutants/{pollutantId}:
    get:
      summary: Finds a pollutant
      operationId: findPollutant
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A found pollutant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pollutant"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Updates pollutant
      operationId: updatePollutant
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated pollutant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pollutant"
      responses:
        "200":
          description: Pollutant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pollutant"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes pollutant
      operationId: deletePollutant
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/pollutants/{pollutantId}/style:
    get:
      summary: Finds a list of pollutant color codes that are used by geoserver. Updates to the style's values and colors happen when pollutant is updated with new pollutionOverlayLimit properties.
      operationId: findPollutantColorCodes
      tags:
        - Pollutants
      parameters:
        - name: pollutantId
          in: path
          description: Pollutant id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A found pollutant's color code and value list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PollutantColorCode"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/routingModes:
    get:
      summary: Lists all default routing modes
      operationId: getRoutingModes
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeName
          in: query
          description: Routing mode name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: found routing modes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DefaultRoutingMode"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Creates a new default routing mode
      operationId: createRoutingMode
      tags:
        - DefaultRoutingModes
      requestBody:
        description: New routing mode
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefaultRoutingMode"
      responses:
        "200":
          description: Created routing mode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultRoutingMode"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/routingModes/{routingModeId}:
    get:
      summary: Finds a routing mode
      operationId: findRoutingMode
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeId
          in: path
          description: Routing mode id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A found routing mode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultRoutingMode"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Updates routing mode
      operationId: updateRoutingMode
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeId
          in: path
          description: Routing mode id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated default routing mode
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefaultRoutingMode"
      responses:
        "200":
          description: Updated default routing mode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultRoutingMode"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes routing mode
      operationId: deleteRoutingMode
      tags:
        - DefaultRoutingModes
      parameters:
        - name: routingModeId
          in: path
          description: Routing mode id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty result indication of a successful removal
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RoutePollutionExposureRecord:
      type: object
      description: Historical entry of the route pollution information.
      properties:
        id:
          type: string
          format: uuid
        routeId:
          type: string
          format: uuid
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        exposureMeasurements:
          description: List of exposure entries that user breathed in during the route (for dial)
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/ExposureMeasurement"
        pollutionValuesForRoute:
          description: List of air quality concentration entries for all the route points (i.e. for route line coloring)
          type: array
          items:
            $ref: "#/components/schemas/AirQuality"
        timeUnit:
          $ref: "#/components/schemas/ExposureMeasurementTimeUnit"
          description: Time unit for the results if any

    ExposureMeasurement:
      type: object
      description: Single exposure measurement, can be usued both for passive exposure measurements and route exposure measurements.
      required:
        - time
        - airQuality
      properties:
        id:
          type: string
          format: uuid
        time:
          type: string
          format: date-time
          readOnly: true
        exposureValues:
          description: List of exposure entries that user breathed in.
          type: array
          items:
            $ref: "#/components/schemas/PollutionEntry"
        timeUnit:
          $ref: "#/components/schemas/ExposureMeasurementTimeUnit"
          description: Time unit for the results.

    PassiveExposureMeasurementRequest: 
      type: object
      description: Passive exposure collection request. Object is used to create requests of passive exposure collection from the API
      required:
        - time
        - location
      properties:
        time:
          type: string
          format: date-time
        location:
          $ref: "#/components/schemas/Location"

    ExposureMeasurementTimeUnit:
      type: string
      description: Time unit for passive exposure measurement
      enum:
        - MIN1
        - MIN5
        - MIN15
        - HOUR
        - DAY
        - WEEK
        - MONTH
        - YEAR

    Route:
      type: object
      description: Saved route, either for route history or as favorite.
      required:
        - name
        - routePoints
        - locationNames
        - locationFromName
        - locationToName
        - isPublic
        - transportationType
        - routeHistoryType
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        routePoints:
          type: string
        locationNames:
          type: string
          description: Compressed location names along the route
        locationFromName:
          type: string
        locationToName:
          type: string
        routeHistoryType:
          type: string
          $ref: "#/components/schemas/RouteHistoryType"
        transportationType:
          type: string
          $ref: "#/components/schemas/TransportationType"
        isPublic:
          type: boolean
        steps:
          type: array
          items:
            $ref: "#/components/schemas/RouteStep"
        savedAt:
          type: string
          format: date-time
        routeDistance:
          type: number
          format: float
          description: Length of the saved route in meters
        routeTime:
          type: integer
          format: int64
          description: Time of the saved route in seconds
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Location:
      type: object
      description: location with given lat and lon coordinates
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

    AirQuality:
      type: object
      description: air quality data for the given location
      required:
        - pollutionValues
        - location
      properties:
        location:
          $ref: "#/components/schemas/Location"
        pollutionValues:
          type: array
          items:
            $ref: "#/components/schemas/PollutionEntry"

    Address:
      type: object
      required:
        - streetAddress
        - postalCode
        - city
        - country
      properties:
        streetAddress:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string

    FavouriteLocation:
      type: object
      description: saved location
      required:
        - name
        - latitude
        - longitude
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        address:
          $ref: "#/components/schemas/Address"

    MedicalCondition:
      type: object
      required:
        - conditionName
        - conditionApproved
      properties:
        id:
          type: string
          format: uuid
        conditionName:
          type: string
        conditionApproved:
          type: boolean
        conditionPenalties:
          type: array
          items:
            $ref: "#/components/schemas/PollutantPenalty"

    PollutantPenalty:
      type: object
      description: Penalty for the maximum allowed pollution values of the pollutant
      required:
        - penalty
        - threshold
      properties:
        id:
          type: string
          format: uuid
        pollutantId:
          type: string
          format: uuid
        penalty:
          type: number
          format: float
        threshold:
          type: number
          format: float

    Pollutant:
      type: object
      required:
        - pollutantName
        - displayName
        - unit
        - variableName
        - requestParameters
      properties:
        id:
          type: string
          format: uuid
        pollutantName:
          type: string
          description: Pollutant reference name for request parameters
        displayName:
          type: string
          description: Displayed name for a pollutant
        shortName:
          type: string
          description: Short name for a pollutant
        unit:
          type: string
        variableName:
          type: string
          description: Pollutant variable name for NetCDF file indexing
        limit:
          description: Maximum allowed concentration of pollutant that user can be exposed to
          type: number
          format: float
        recommendation:
          description: Recommended concentration of pollutant that user can be exposed to
          type: number
          format: float
        recommendationExposure15Minutes:
          description: Recommended max exposure for 15 minutes (total sum of consumed pollutant)
          type: number
          format: float
        limitExposure15Minutes:
          description: Limit max exposure for 15 minutes (total sum of consumed pollutant)
          type: number
          format: float
        pollutionOverlayLimit:
          description: Limit of pollution level that will be used for map overlay styling
          type: number
          format: float
        requestParameters:
          $ref: "#/components/schemas/PollutantRequestParameter"
          description: Parameter that is used for OTP routing for the given pollutant

    PollutantRequestParameter:
      type: object
      description: Parameter that is used for OTP routing for the given pollutant
      required:
        - penaltyRequestParameter
        - thresholdRequestParameter
      properties:
        penaltyRequestParameter:
          type: string
        thresholdRequestParameter:
          type: string

    PollutionEntry:
      type: object
      description: Pollution data for the given pollutant
      properties:
        pollutantId:
          type: string
          format: uuid
        value:
          type: number
          format: float

    User:
      type: object
      description: User object
      required:
        - name
        - email
        - showMobileWelcomeScreen
        - pollutantPenalties
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: User name
        surname:
          type: string
          description: User family name
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
        homeLocation:
          $ref: "#/components/schemas/FavouriteLocation"
        workLocation:
          $ref: "#/components/schemas/FavouriteLocation"
        showMobileWelcomeScreen:
          type: boolean
        pollutantPenalties:
          type: array
          items:
            $ref: "#/components/schemas/PollutantPenalty"
          description: user's personal pollutant penalty settings
        medicalConditions:
          type: array
          items:
            type: string
            format: uuid
        transportPreference:
          type: string
          $ref: "#/components/schemas/TransportationType"
        subscriptionStatus:
          type: string
          $ref: "#/components/schemas/StripeSubscriptionStatus"
          description: status of Stripe subscription

    RoutePointsAirQuality:
      type: object
      description: Read-only air quality data for the array of coordinates of the route and corresponding exposure values
      required:
        - pollutionValuesForRoute
        - exposureValuesForRoute
      properties:
        pollutionValuesForRoute:
          description: List of air qualities for the coordinates passed in original request
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/AirQuality"

    DefaultRoutingMode:
      type: object
      description: detault routing mode
      required:
        - name
        - pollutionPenalties
        - icon
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        icon:
          $ref: "#/components/schemas/RoutingModeIcon"
        pollutantPenalties:
          type: array
          items:
            $ref: "#/components/schemas/PollutantPenalty"

    RouteHistoryType:
      type: string
      description: Route saving type
      enum:
        - FAVORITE
        - HISTORY

    TransportationType:
      type: string
      description: Route transportantion type
      enum:
        - WALKING
        - BIKING
        - ACCESSIBILITY

    RoutingModeIcon:
      type: string
      description: Icon type of a routing mode
      enum:
        - heart
        - thumbUp
        - insight
        - timer
        - timeLine
        - eco

    RouteStep:
      type: object
      description: Route step data that is built by Open Trip Planner
      properties:
        distance:
          type: number
          format: float
          description: Distance
        lat:
          type: number
          format: float
          description: Latitude
        lon:
          type: number
          format: float
          description: Longitude
        streetName:
          type: string
          description: Street name
        relativeDirection:
          type: string
          description: Relative direction
        absoluteDirection:
          type: string
          description: Absolute direction
        stayOn:
          type: boolean
        area:
          type: boolean
        bogusName:
          type: boolean
        elevation:
          type: string

    PollutantColorCode:
      type: object
      description: Pollutant's color code and values for map overlay
      properties:
        colorCode:
          type: string
        value:
          type: number
          format: float

    StripeProductPrice:
      type: object
      properties:
        id:
          type: string
        unitAmount:
          type: string
        interval:
          type: string
        intervalCount:
          type: integer
          format: int64

    StripeProduct:
      type: object
      description: Object describing stripe product
      properties:
        id:
          type: string
          description: Stripe product id
        name:
          type: string

    StripeSubscription:
      type: object
      description: Object describing stripe subscription
      properties:
        id:
          type: string
          description: Stripe subscription id
        priceId:
          type: string
          description: Stripe price id
        cancelAtPeriodEnd:
          type: boolean
        currentPeriodStart:
          type: integer
          format: int64
        currentPeriodEnd:
          type: integer
          format: int64
        clientSecret:
          type: string
        defaultPaymentMethodId:
          description: ID of default payment method
          type: string
        invoices:
          type: array
          items:
            $ref: "#/components/schemas/StripeInvoice"

    StripeCard:
      type: object
      properties:
        id:
          type: string
        brand:
          type: string
        last4:
          type: string

    StripeSubscriptionStatus:
      type: string
      description: Status where NOT_INITIATED is the initial status which is not yet set up in payment system, ACTIVE means subscription with functional payments, NOT_PAID is status where payments are not working, ENDED is for cancelled and unpaid subscriptions
      enum:
        - NOT_INITIATED
        - ACTIVE
        - NOT_PAID
        - ENDED

    StripeInvoice:
      type: object
      description: Object partially describing stripe invoice
      properties:
        amount:
          type: integer
          format: int64
        currency:
          type: string
        date:
          type: integer
          format: int64
        paid:
          type: boolean
        cardLast4:
          type: string
